<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<beans
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd "
	xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- import the beans from another XML file -->
	<import resource="classpath:META-INF/spring/beans.xml" />

	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<propertyPlaceholder id="properties" location="classpath:META-INF/conf/integrationEsbConfig.properties"
			prefixToken="{{" suffixToken="}}" />

		<template id="zeroMqFileTemplate" defaultEndpoint="zeromq:tcp://{{zeromq.host}}:{{zeromq.file_port}}?socketType=PUSH" />

		<threadPoolProfile id="myDefaultProfile" defaultProfile="true" poolSize="{{thread.poolsize}}"
			keepAliveTime="{{thread.keepalivetime}}" maxPoolSize="{{thread.maxpoolsize}}" maxQueueSize="{{thread.maxqueuesize}}"
			rejectedPolicy="Abort" />


		<route id="ping">
			<!-- incoming requests from the servlet is routed -->
			<from uri="servlet:///ping" />
			<choice>
				<when>
					<!-- is there a header with the key name? -->
					<header>name</header>
					<!-- yes so return back a message to the user -->
					<transform>
						<simple>Hello ${header.name} how are you?</simple>
					</transform>
				</when>
				<otherwise>
					<!-- if no name parameter then output a syntax to the user -->
					<transform>
						<constant>pong</constant>
						<!-- Add a name parameter to uri, eg ?name=foo -->
					</transform>
				</otherwise>
			</choice>
		</route>
		<route id="Hdfs-FileList-Query">
			<from uri="timer://hdfsScanTimer?fixedRate=true&amp;period=10000" />
			<pipeline>
				<bean ref="hdfs2InboundAdaptor" method="getSetOfLatestHdfsFiles" />
				<process ref="convertFileNameToModel" />
				<bean ref="esOutboundService" method="updateFilesInfo" />
			</pipeline>
			<log message="Message In ES Store to MQ ${body}" />
		</route>
		<route id="Hdfs-File-Reader">
			<from uri="timer://hdfsScanTimer?fixedRate=true&amp;period=8000" />
			<bean ref="esInboundService" method="getAllLatestFilesInfo" />
			<split>
				<simple>${body}</simple>
				<log message="*** Split Body (${body})" />
				<bean ref="hdfs2ConsumerService" method = "readFileContent" />
				<log message="*** Hdfs Content (${body})" />
				<!-- Parallel Socket access of ZMQ is causing issues. Please refrain from that in version 2.2.0. -->
				<log message="Message PUSH to MQ ${body}" />
				<!-- Use socket's to differentiate channels. PUB/SUB PUSH/PULL are with-in a socket -->
				<to uri="zeromq:tcp://{{zeromq.host}}:{{zeromq.push_port}}?socketType=PUSH" />
			</split>
		</route>
		<route id="Kafka-Message-Split-Publish">
			<from uri="zeromq:tcp://{{zeromq.host}}:{{zeromq.push_port}}?socketType=PULL&amp;asyncConsumer=true" />
			<log message="Message PULL of MQ with BODY: ${body}" />
			<!-- throttle 100000 messages per 1 sec -->
			<throttle timePeriodMillis="10000">
				<constant>{{throttle.msg.limit}}</constant>
				<split shareUnitOfWork="true" streaming="true" parallelProcessing="true" executorServiceRef="myDefaultProfile">
					<tokenize token="{{split.tokenizer}}" />
					<!-- Process any specific splits ref="splitMessageProcessor" / -->
					<!-- If needed perform Decryption & Encryption here. -->
					<setHeader headerName="kafka.PARTITION_KEY">
						<constant>{{kafka.partition.key}}</constant>
					</setHeader>
					<log message="Message kafka send to MQ Header: (${header.KAFKA.PARTITION_KEY}) with Body: (${body})" />
					<to
						uri="kafka:{{kafka.host}}:{{kafka.port}}?topic={{kafka.topic}}&amp;zookeeperHost={{zookeeper.host}}&amp;zookeeperPort={{zookeeper.port}}&amp;serializerClass={{kafka.serializer}}" />
					<log message="Message kafka send completed." />
				</split>
			</throttle>
		</route>

	</camelContext>
</beans>
